version: '3.9'

x-env-license: &env-license-volume '${NEXUS_LICENSE_PATH:?err}:/sonatype-license.lic'

x-env-fortify-license: &env-fortify-license-volume '${FORTIFY_SSC_LICENSE_PATH:?err}:/fortify/fortify.license'

x-nxrm3-healthcheck:
  &nxrm3-healthcheck
  test:
    [
      "CMD",
      "curl",
      "--fail",
      "--silent",
      "http://localhost:8081/service/rest/v1/status/writable"
    ]
  interval: 10s
  timeout: 10s
  retries: 10
  start_period: 40s

x-nxrm3-volume-nexus-properties: &nxrm3-volume-nexus-properties './config/nexus-repo.properties:/nexus-data/etc/nexus.properties'

x-nxrm3-volume-casc-config: &nxrm3-volume-casc-config './config/nexus-repo-casc.yaml:/opt/nexus.yml:ro'

x-nxrm3-volume-casc-config-oss: &nxrm3-volume-casc-config-oss './config/nexus-repo-casc-oss.yaml:/opt/nexus.yml:ro'

x-nxrm3-volume-data: &nxrm3-volume-data '${DOCKER_ROOT_VOLUME_MOUNT_POINT:?err}/nexus-data:/nexus-data:delegated'

secrets:
  admin_password:
    file: ./config/admin_password

services:

  nxiq_direct:
    image: "${NEXUS_DOCKER_IMAGE_ORGANIZATION}/nexus-iq-server:${NEXUS_IQ_SERVER_VERSION:?err}"
    dns:
      - 8.8.8.8
      - 8.8.4.4
    environment:
      JAVA_OPTS: "-Ddw.baseUrl=${NXLC_FQDN_URL:-http://iq.localhost:8070} -Djava.util.prefs.userRoot=/sonatype-work/javaprefs"
    ports:
      - "8070:8070"
      - "8071:8071"
    profiles:
      - direct
    secrets:
      - admin_password
    volumes:
      - *env-license-volume
      - "./config/nexus-iq-config.yaml:/etc/nexus-iq-server/config.yml:delegated"
      - "${DOCKER_ROOT_VOLUME_MOUNT_POINT:?err}/iq-data:/sonatype-work:delegated"
      - "${DOCKER_ROOT_VOLUME_MOUNT_POINT:?err}/iq-logs:/opt/sonatype/nexus-iq-server/log:delegated"

  nxiq-proxied:
    image: "${NEXUS_DOCKER_IMAGE_ORGANIZATION}/nexus-iq-server:${NEXUS_IQ_SERVER_VERSION:?err}"
    environment:
      JAVA_OPTS: "-Ddw.baseUrl=${NXLC_FQDN_URL:-http://iq.localhost} -Djava.util.prefs.userRoot=/sonatype-work/javaprefs"
    networks:
      - platform
    profiles:
      - proxied
      - cicd-jenkins
      - cicd-teamcity
    secrets:
      - admin_password
    volumes:
      - *env-license-volume
      - "./config/nexus-iq-config.yaml:/etc/nexus-iq-server/config.yml:delegated"
      - "${DOCKER_ROOT_VOLUME_MOUNT_POINT:?err}/iq-data:/sonatype-work:delegated"
      - "${DOCKER_ROOT_VOLUME_MOUNT_POINT:?err}/iq-logs:/opt/sonatype/nexus-iq-server/log:delegated"

  nxrm3_direct:
    build:
      context: ./nxrm3
      args:
        NEXUS_DOCKER_IMAGE_ORGANIZATION: "${NEXUS_DOCKER_IMAGE_ORGANIZATION}"
        NEXUS_REPOSITORY_VERSION: "${NEXUS_REPOSITORY_VERSION}"
        NEXUS_CASC_PLUGIN_VERSION: "${NEXUS_CASC_PLUGIN_VERSION}"
      platforms:
        - "linux/arm64"
    environment:
      BASE_URL: "${NXRM_FQDN_URL:-http://repo.localhost:8081}"
      NEXUS_SECURITY_RANDOMPASSWORD: 'false'
      NEXUS_CASC_CONFIG: '/opt/nexus.yml'
      NEXUS_IQ_BASE_URL: "${NXLC_FQDN_URL:-http://iq.localhost:8070}"
    healthcheck:
      <<: *nxrm3-healthcheck
    ports:
      - '8081:8081'
      - '8083:8083'
    profiles:
      - direct
    secrets:
      - admin_password
    volumes:
      - *env-license-volume
      - *nxrm3-volume-nexus-properties
      - *nxrm3-volume-casc-config
      - *nxrm3-volume-data

  nxrm3_direct_oss:
    build:
      context: ./nxrm3
      args:
        NEXUS_DOCKER_IMAGE_ORGANIZATION: "${NEXUS_DOCKER_IMAGE_ORGANIZATION}"
        NEXUS_REPOSITORY_VERSION: "${NEXUS_REPOSITORY_VERSION}"
        NEXUS_CASC_PLUGIN_VERSION: "${NEXUS_CASC_PLUGIN_VERSION}"
    environment:
      BASE_URL: 'http://repo.localhost:8081'
      NEXUS_SECURITY_RANDOMPASSWORD: 'false'
      NEXUS_CASC_CONFIG: '/opt/nexus.yml'
    healthcheck:
      <<: *nxrm3-healthcheck
    ports:
      - '8081:8081'
      - '8083:8083'
    profiles:
      - repoOssDemo
    secrets:
      - admin_password
    volumes:
      - *nxrm3-volume-nexus-properties
      - *nxrm3-volume-casc-config-oss
      - *nxrm3-volume-data

  nxrm3-proxied:
    build:
      context: ./nxrm3
      args:
        NEXUS_DOCKER_IMAGE_ORGANIZATION: "${NEXUS_DOCKER_IMAGE_ORGANIZATION}"
        NEXUS_REPOSITORY_VERSION: "${NEXUS_REPOSITORY_VERSION}"
        NEXUS_CASC_PLUGIN_VERSION: "${NEXUS_CASC_PLUGIN_VERSION}"
    environment:
      BASE_URL: "${NXRM_FQDN_URL:-http://repo.localhost}"
      NEXUS_SECURITY_RANDOMPASSWORD: 'false'
      NEXUS_CASC_CONFIG: '/opt/nexus.yml'
      NEXUS_IQ_BASE_URL: "${NXLC_FQDN_URL:-http://iq.localhost}"
    healthcheck:
      <<: *nxrm3-healthcheck
    networks:
      - platform
    ports:
      - '8083:8083'
    profiles:
      - proxied
      - cicd-jenkins
      - cicd-teamcity
    secrets:
      - admin_password
    volumes:
      - *env-license-volume
      - *nxrm3-volume-nexus-properties
      - *nxrm3-volume-casc-config
      - *nxrm3-volume-data

  proxy:
    image: "nginx:${NGINX_VERSION:?err}"
    depends_on:
      - nxrm3-proxied
      - nxiq-proxied
    environment:
      - NGINX_HOST=nexus-platform.localhost
      - NGINX_PORT=80
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "--silent",
          "http://localhost"
        ]
      interval: 15s
      timeout: 2s
      retries: 10
      start_period: 20s
    networks:
      - platform
    ports:
      - "80:80"
    profiles:
      - proxied
    volumes:
      - "./config/nginx.conf:/etc/nginx/nginx.conf:ro"
      - "./config/nginx-www:/usr/share/nginx/html:ro"

  proxy-cicd-jenkins:
    image: "nginx:${NGINX_VERSION:?err}"
    depends_on:
      - nxrm3-proxied
      - nxiq-proxied
      - jenkins-proxied
    environment:
      - NGINX_HOST=nexus-platform.localhost
      - NGINX_PORT=80
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "--silent",
          "http://localhost"
        ]
      interval: 15s
      timeout: 2s
      retries: 10
      start_period: 20s
    networks:
      - platform
    ports:
      - "80:80"
    profiles:
      - cicd-jenkins
    volumes:
      - "./config/nginx-cicd.conf:/etc/nginx/nginx.conf:ro"
      - "./config/nginx-www:/usr/share/nginx/html:ro"

  proxy-cicd-teamcity:
    image: "nginx:${NGINX_VERSION:?err}"
    depends_on:
      - nxrm3-proxied
      - nxiq-proxied
      - teamcity-proxied
    environment:
      - NGINX_HOST=nexus-platform.localhost
      - NGINX_PORT=80
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "--silent",
          "http://localhost"
        ]
      interval: 15s
      timeout: 2s
      retries: 10
      start_period: 20s
    networks:
      - platform
    ports:
      - "80:80"
    profiles:
      - cicd-teamcity
    volumes:
      - "./config/nginx-cicd-teamcity.conf:/etc/nginx/nginx.conf:ro"
      - "./config/nginx-www:/usr/share/nginx/html:ro"

  # ------- Other non Sonatype Services --------
  jenkins-direct:
    build: ./jenkins
    environment:
      JAVA_OPTS: '-Djenkins.install.runSetupWizard=false'
      JENKINS_OPTS: '--prefix=/jenkins --argumentsRealm.roles.user=admin --argumentsRealm.passwd.admin=admin --argumentsRealm.roles.admin=admin'
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "--silent",
          "http://localhost/jenkins/login"
        ]
      interval: 15s
      timeout: 2s
      retries: 10
      start_period: 30s
    ports:
      - '8888:8080'
    networks:
      - platform
    profiles:
      - jenkins
    volumes:
      - '${DOCKER_ROOT_VOLUME_MOUNT_POINT:?err}/jenkins:/var/jenkins_home:delegated'

  jenkins-proxied:
    build: ./jenkins
    environment:
      JAVA_OPTS: '-Djenkins.install.runSetupWizard=false'
      JENKINS_OPTS: '--prefix=/jenkins --argumentsRealm.roles.user=admin --argumentsRealm.passwd.admin=admin --argumentsRealm.roles.admin=admin'
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "--fail",
          "--silent",
          "http://localhost/jenkins/login"
        ]
      interval: 15s
      timeout: 2s
      retries: 10
      start_period: 30s
    networks:
      - platform
    profiles:
      - cicd-jenkins
    volumes:
      - '${DOCKER_ROOT_VOLUME_MOUNT_POINT:?err}/jenkins:/var/jenkins_home:delegated'

  swagger-editor:
    image: "swaggerapi/swagger-editor:latest"
    environment:
      BASE_URL: /swagger-editor
    networks:
      - platform
    profiles:
      - swagger

  swagger-ui:
    image: "swaggerapi/swagger-ui:latest"
    environment:
      BASE_URL: /swagger-ui
    networks:
      - platform
    profiles:
      - swagger

  # NOT ARM COMPATIBLE
  teamcity-proxied:
    build: ./teamcity-server
    networks:
      - platform
      - teamcity
    profiles:
      - cicd-teamcity
    volumes:
      - '${DOCKER_ROOT_VOLUME_MOUNT_POINT:?err}/teamcity-server/data:/data/teamcity_server/datadir'
      - '${DOCKER_ROOT_VOLUME_MOUNT_POINT:?err}/teamcity-server/logs:/opt/teamcity/logs'

  # NOT ARM COMPATIBLE
  teamcity-agent-linux:
    build: ./teamcity-agent
    environment:
      AGENT_NAME: 'Linux Agent'
      SERVER_URL: 'http://teamcity-proxied:8111/teamcity'
    networks:
      - teamcity
    profiles:
      - cicd-teamcity
  # teamcity-agent-windows:
  #   build: ./teamcity-agent-windows
  #   environment:
  #     AGENT_NAME: 'Windows Agent'
  #     SERVER_URL: 'http://teamcity-proxied:8111'
  #   networks:
  #     - teamcity

  fortify_ssc:
    command: bash -c "cp /fortify.license /fortify && start_demo.sh"
    image: "${FORTIFY_DOCKER_IMAGE_REPO}/fortifydocker/sscdemo:${FORTIFY_SSC_VERSION}"
    environment:
      - SSC_MAX_MEM_MB=8192
      - SSC_CONTEXT=/ssc
    ports:
      - '2212:8080'
    profiles:
      - fortify-ssc
    volumes:
      - "ssc-demo-data:/fortify"
      - "${FORTIFY_SSC_LICENSE_PATH}:/fortify.license"

  webhook-teams:
    image: sonatypecommunity/sonatype-teams-webhook-handler:latest
    environment:
      - IQ_SERVER_URL=${NXLC_FQDN_URL:-http://iq.localhost:8070}
      - PORT=3000
      - TEAMS_WEBHOOK_URL=${MS_TEAMS_WEBHOOK}
    ports:
      - '3000:3000'
    profiles:
      - webhooks

networks:
  platform: null
  teamcity: null

volumes:
  ssc-demo-data:
    driver: local
